name: CI/CD Deployment Pipeline

on:
  workflow_dispatch: {}   # ejecútalo manualmente desde Actions

permissions:
  contents: write

jobs:
  # 1) BUILD: compila y publica un artefacto único para todas las etapas
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: npm install

      - name: Build (ncc optional)
        run: |
          if [ -f src/index.js ]; then
            npx --yes @vercel/ncc build src/index.js --license licenses.txt || echo "ncc skipped"
          fi

      - name: Zip artifact
        run: zip -r build.zip . -x ".git/*" "node_modules/*" ".github/*"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

  # 2) STAGING: usa el MISMO artefacto y publica release de staging
  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Compute staging tag
        id: stag_tag
        shell: bash
        run: |
          base="${{ vars.BUILD_TAG }}"
          [ -z "$base" ] && base="staging"
          echo "tag=${base}-${GITHUB_RUN_NUMBER}" >> "$GITHUB_OUTPUT"

      - name: Release to Staging
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.stag_tag.outputs.tag }}
          name: ${{ steps.stag_tag.outputs.tag }}
          body: ${{ vars.RELEASE_NOTE }}
          files: build.zip
          fail_on_unmatched_files: false

  # 3) PRODUCTION: solo si staging pasó; se frena por aprobación (environment: production)
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Compute prod tag
        id: prod_tag
        shell: bash
        run: |
          base="${{ vars.BUILD_TAG }}"
          [ -z "$base" ] && base="prod"
          echo "tag=${base}-${GITHUB_RUN_NUMBER}" >> "$GITHUB_OUTPUT"

      - name: Release to Production
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.prod_tag.outputs.tag }}
          name: ${{ steps.prod_tag.outputs.tag }}
          body: ${{ vars.RELEASE_NOTE }}
          files: build.zip
          fail_on_unmatched_files: false
