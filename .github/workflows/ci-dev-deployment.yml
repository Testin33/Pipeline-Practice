name: CI Dev Deployment

on:
  push:
    branches: [ master ]   # tu rama

permissions:
  contents: write          # necesario para crear releases

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # NO usamos cache porque no hay lockfile

      # InstalaciÃ³n tolerante:
      # - si hay package-lock.json -> npm ci
      # - si solo hay package.json -> npm install
      # - si no hay ninguno -> no instalamos
      - name: Install deps (if present)
        shell: bash
        run: |
          set -e
          if [ -f package-lock.json ]; then
            echo "Found package-lock.json -> npm ci"
            npm ci
          elif [ -f package.json ]; then
            echo "Found package.json -> npm install"
            npm install
          else
            echo "No package.json -> skipping install"
          fi

      # Build tolerante:
      # si existe src/index.js intentamos compilar con ncc,
      # si falla o no existe, seguimos (esto evita exit code 1).
      - name: Build (try ncc if src/index.js exists)
        shell: bash
        run: |
          set -e
          if [ -f src/index.js ]; then
            echo "Building with ncc..."
            npx --yes @vercel/ncc build src/index.js --license licenses.txt || {
              echo "ncc failed, continuing without bundle";
            }
          else
            echo "src/index.js not found, skipping ncc build"
          fi

      - name: Zip artifact
        run: |
          zip -r build.zip . \
            -x ".git/*" "node_modules/*" ".github/*"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Release Dev Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ vars.BUILD_TAG }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          gh release create "$TAG" build.zip --notes "$NOTE"
